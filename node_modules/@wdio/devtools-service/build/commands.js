"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/web.url");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _network = _interopRequireDefault(require("./handler/network"));

var _constants = require("./constants");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = (0, _logger.default)('@wdio/devtools-service:CommandHandler');

class CommandHandler {
  constructor(session, page) {
    this.session = session;
    this.page = page;
    this.isTracing = false;
    this.networkHandler = new _network.default(session);
    const commands = Object.getOwnPropertyNames(Object.getPrototypeOf(this)).filter(fnName => fnName !== 'constructor' && !fnName.startsWith('_'));
    commands.forEach(fnName => global.browser.addCommand(fnName, this[fnName].bind(this)));
  }

  cdp(domain, command, args = {}) {
    log.info(`Send command "${domain}.${command}" with args: ${JSON.stringify(args)}`);
    return this.session.send(`${domain}.${command}`, args);
  }

  async getNodeId(selector) {
    const document = await this.session.send('DOM.getDocument');
    const {
      nodeId
    } = await this.session.send('DOM.querySelector', {
      nodeId: document.root.nodeId,
      selector
    });
    return nodeId;
  }

  async getNodeIds(selector) {
    const document = await this.session.send('DOM.getDocument');
    const {
      nodeIds
    } = await this.session.send('DOM.querySelectorAll', {
      nodeId: document.root.nodeId,
      selector
    });
    return nodeIds;
  }

  startTracing({
    categories = _constants.DEFAULT_TRACING_CATEGORIES,
    path,
    screenshots = true
  } = {}) {
    if (this.isTracing) {
      throw new Error('browser is already being traced');
    }

    this.isTracing = true;
    this.traceEvents = undefined;
    return this.page.tracing.start({
      categories,
      path,
      screenshots
    });
  }

  async endTracing() {
    if (!this.isTracing) {
      throw new Error('No tracing was initiated, call `browser.startTracing()` first');
    }

    try {
      this.traceEvents = await this.page.tracing.stop();
      this.traceEvents = JSON.parse(this.traceEvents.toString('utf8'));
      this.isTracing = false;
    } catch (err) {
      throw new Error(`Couldn't parse trace events: ${err.message}`);
    }

    return this.traceEvents;
  }

  getTraceLogs() {
    return this.traceEvents;
  }

  getPageWeight() {
    const pageWeight = (0, _utils.sumByKey)(Object.values(this.networkHandler.requestTypes), 'size');
    const transferred = (0, _utils.sumByKey)(Object.values(this.networkHandler.requestTypes), 'encoded');
    const requestCount = (0, _utils.sumByKey)(Object.values(this.networkHandler.requestTypes), 'count');
    return {
      pageWeight,
      transferred,
      requestCount,
      details: this.networkHandler.requestTypes
    };
  }

}

exports.default = CommandHandler;