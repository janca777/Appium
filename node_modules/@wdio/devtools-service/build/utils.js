"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setUnsupportedCommand = setUnsupportedCommand;
exports.sumByKey = sumByKey;
exports.isSupportedUrl = isSupportedUrl;
exports.isBrowserVersionLower = isBrowserVersionLower;
exports.getBrowserMajorVersion = getBrowserMajorVersion;
exports.isBrowserSupported = isBrowserSupported;

var _constants = require("./constants");

const VERSION_PROPS = ['browserVersion', 'browser_version', 'version'];
const SUPPORTED_BROWSERS_AND_MIN_VERSIONS = {
  'chrome': 63,
  'chromium': 63,
  'googlechrome': 63,
  'google chrome': 63
};

function setUnsupportedCommand() {
  return global.browser.addCommand('cdp', () => {
    throw new Error(_constants.UNSUPPORTED_ERROR_MESSAGE);
  });
}

function sumByKey(list, key) {
  return list.map(data => data[key]).reduce((acc, val) => acc + val, 0);
}

function isSupportedUrl(url) {
  return _constants.IGNORED_URLS.filter(ignoredUrl => url.startsWith(ignoredUrl)).length === 0;
}

function isBrowserVersionLower(caps, minVersion) {
  const browserVersion = getBrowserMajorVersion(caps[VERSION_PROPS.find(prop => caps[prop])]);
  return typeof browserVersion === 'number' && browserVersion < minVersion;
}

function getBrowserMajorVersion(version) {
  let majorVersion = version;

  if (typeof version === 'string') {
    majorVersion = Number(version.split('.')[0]);
    majorVersion = isNaN(majorVersion) ? version : majorVersion;
  }

  return majorVersion;
}

function isBrowserSupported(caps) {
  if (!caps.browserName || !(caps.browserName.toLowerCase() in SUPPORTED_BROWSERS_AND_MIN_VERSIONS) || isBrowserVersionLower(caps, SUPPORTED_BROWSERS_AND_MIN_VERSIONS[caps.browserName.toLowerCase()])) {
    return false;
  }

  return true;
}