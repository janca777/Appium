"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = require("../constants");

class NetworkHandler {
  constructor(session) {
    this.requestLog = {
      requests: []
    };
    this.requestTypes = {};
    this.cachedFirstRequest = null;
    session.on('Network.dataReceived', this.onDataReceived.bind(this));
    session.on('Network.responseReceived', this.onNetworkResponseReceived.bind(this));
    session.on('Network.requestWillBeSent', this.onNetworkRequestWillBeSent.bind(this));
    session.on('Page.frameNavigated', this.onPageFrameNavigated.bind(this));
  }

  findRequest(params) {
    let request = this.requestLog.requests.find(req => req.id === params.requestId);

    if (!request && this.cachedFirstRequest && this.cachedFirstRequest.id === params.requestId) {
      request = this.cachedFirstRequest;
    }

    return request;
  }

  onDataReceived(params) {
    let request = this.findRequest(params);

    if (!request || !this.requestTypes[request.type]) {
      return;
    }

    this.requestTypes[request.type].size += parseInt(params.dataLength, 10);
    this.requestTypes[request.type].encoded += parseInt(params.encodedDataLength, 10);
  }

  onNetworkResponseReceived(params) {
    let request = this.findRequest(params);

    if (!request) {
      return;
    }

    request.statusCode = params.response.status;
    request.requestHeaders = params.response.requestHeaders;
    request.responseHeaders = params.response.headers;
    request.timing = params.response.timing;
    request.type = params.type;
  }

  onNetworkRequestWillBeSent(params) {
    let isFirstRequestOfFrame = false;

    if (params.type === 'Document' && params.initiator.type === 'other' && _constants.IGNORED_URLS.filter(url => params.request.url.startsWith(url)).length === 0) {
      isFirstRequestOfFrame = true;
      this.requestTypes = {};
    }

    const log = {
      id: params.requestId,
      url: params.request.url,
      method: params.request.method
    };

    if (params.redirectResponse) {
      log.redirect = {
        url: params.redirectResponse.url,
        statusCode: params.redirectResponse.status,
        requestHeaders: params.redirectResponse.requestHeaders,
        responseHeaders: params.redirectResponse.headers,
        timing: params.redirectResponse.timing
      };
    }

    if (!this.requestTypes[params.type]) {
      this.requestTypes[params.type] = {
        size: 0,
        encoded: 0,
        count: 1
      };
    } else {
      this.requestTypes[params.type].count++;
    }

    if (isFirstRequestOfFrame) {
      log.loaderId = params.loaderId;
      this.cachedFirstRequest = log;
      return;
    }

    return this.requestLog.requests.push(log);
  }

  onPageFrameNavigated(params) {
    if (!params.frame.parentId && _constants.IGNORED_URLS.filter(url => params.frame.url.startsWith(url)).length === 0) {
      this.requestLog = {
        id: params.frame.loaderId,
        url: params.frame.url,
        requests: []
      };

      if (this.cachedFirstRequest && this.cachedFirstRequest.loaderId === params.frame.loaderId) {
        delete this.cachedFirstRequest.loaderId;
        this.requestLog.requests.push(this.cachedFirstRequest);
        this.cachedFirstRequest = null;
      }
    }
  }

}

exports.default = NetworkHandler;